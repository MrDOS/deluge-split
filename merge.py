#! /usr/bin/env python

"""
Merge multiple pairs of Deluge state and fastresume files into a single pair.
"""

import bencode
import deluge.core.torrentmanager
import pickle
import sys

def main(argv):
    """
    Load configuration and input.
    """

    if len(argv) == 0 or (len(argv) - 1) % 2 != 0:
        print('Usage: %s output-state output-fastresume input-1-state input-1-fastresume input-2-state input-2-fastresume ...' % argv[0])
        return 1

    file_pairs = zip(argv[1::2], argv[2::2])
    output_pair = file_pairs[0]
    input_pairs = file_pairs[1:]

    # As with splitting, we'll create a new, empty TorrentManagerState to
    # contain the output. In this case, though, we only need the one.
    output_manager = deluge.core.torrentmanager.TorrentManagerState()
    output_manager_indices = {}
    output_fastresume = {}

    for state_filename, fastresume_filename in input_pairs:
        with open(state_filename, 'rb') as state_file:
            input_manager = pickle.load(state_file)

        with open(fastresume_filename, 'rb') as fastresume_file:
            input_fastresume = bencode.bread(fastresume_file)

        print('Input state file "%s" contains %d torrents.' % (state_filename, len(input_manager.torrents)))

        for torrent in input_manager.torrents:
            if torrent.torrent_id in output_manager_indices:
                print(('Torrent "%s" has already been merged! This torrent '
                    + 'must be present in multiple input instance states. '
                    + 'I\'m going to ignore all but the first instance of the '
                    + 'torrent, so your ratio for the torrent will be skewed '
                    + 'in the output instance.') % torrent.torrent_id)
                continue

            output_manager_indices[torrent.torrent_id] = len(output_manager.torrents)
            output_manager.torrents.append(torrent)

            if torrent.torrent_id in input_fastresume:
                output_fastresume[torrent.torrent_id] = input_fastresume[torrent.torrent_id]
            else:
                print('Warning: no fastresume data for torrent "%s"!' % torrent.torrent_id)

    print('Output contains %d torrents.' % len(output_manager.torrents))

    with open(output_pair[0], 'wb') as state_file:
        # The third argument is the pickle format version. Python 2
        # defaults to version 0; Python 3 defaults to version 2. However,
        # Python 3's implementation of version 0 differs from that of
        # Python 2. I haven't actually tried to run Deluge with a state
        # file generated by Python 3. Maybe it would work. Either way, in
        # the interest of generating a state as close as possible to that
        # which Deluge itself would create, it's probably best to run this
        # under Python 2.
        pickle.dump(output_manager, state_file, 0)

    with open(output_pair[1], 'wb') as fastresume_file:
        bencode.bwrite(output_fastresume, fastresume_file)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
