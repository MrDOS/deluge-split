#! /usr/bin/env python

"""
Split a large Deluge state file into multiple smaller ones based on trackers.
"""

import collections
import deluge.core.torrentmanager
import json
import pickle
import sys
import re

def instance_for_torrent(torrent, instances):
    for instance in instances:
        for tracker in torrent.trackers:
            for instance_tracker in instance['trackers']:
                if re.search(instance_tracker, tracker['url']):
                    return instance

    return None

def main(argv):
    """
    Load configuration and input.
    """

    with open(argv[1], 'rb') as state_file:
        input_manager = pickle.load(state_file)

    with open(argv[2], 'rb') as instances_file:
        instances = json.load(instances_file)

    """
    Splitter? I hardly know her!
    """

    # The top-level serialized value is a TorrentManagerState instance. We'll
    # create new, empty ones for each of our output instances.
    for instance in instances:
        instance['manager'] = deluge.core.torrentmanager.TorrentManagerState()

    # Then it's just a matter of iterating over all the input torrents and
    # binning them appropriately.
    for torrent in input_manager.torrents:
        matching_instance = instance_for_torrent(torrent, instances)

        if matching_instance:
            print('Torrent "%s" belongs with instance "%s".' % (torrent.torrent_id, matching_instance['name']))
            matching_instance['manager'].torrents.append(torrent)
        else:
            print('Warning: no match for torrent "%s"!' % torrent.torrent_id)

    """
    Stats are cool.
    """

    for instance in instances:
        print('%d torrents in instance "%s".' % (len(instance['manager'].torrents), instance['name']))

        with open('%s.state' % instance['name'], 'wb') as state_file:
            # The third argument is the pickle format version. Python 2
            # defaults to version 0; Python 3 defaults to version 2. However,
            # Python 3's implementation of version 0 differs from that of
            # Python 2. I haven't actually tried to run Deluge with a state
            # file generated by Python 3. Maybe it would work. Either way, in
            # the interest of generating a state as close as possible to that
            # which Deluge itself would create, it's probably best to run this
            # under Python 2.
            pickle.dump(instance['manager'], state_file, 0)

        with open('%s.ids' % instance['name'], 'wb') as ids_file:
            ids = [torrent.torrent_id for torrent in instance['manager'].torrents]
            # This is a bit dirty, but it works with both Python 2/3. Might be
            # useful if Deluge ever gets their act together and migrates to
            # Python 3.
            ids_str = ''.join(['%s\n' % id for id in ids]).encode()
            ids_file.write(ids_str)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
